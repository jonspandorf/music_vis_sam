{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "UploadHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/UploadHandlertemp"
      }
    },
    "WorkerHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/music-viz-stack-prod-workerHandler"
      }
    },
    "CheckerHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/music-viz-stack-prod-checkerHandler"
      }
    },
    "DownloadHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/music-viz-stack-prod-downloadHandler"
      }
    },
    "CheckerHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ImageUri": "110828812774.dkr.ecr.us-east-1.amazonaws.com/serverless-music-viz-stack-prod@sha256:5f35a8446851b3f8015a926158f07c94fbe4eb68f8483de18d3b21a5ad281770"
        },
        "PackageType": "Image",
        "FunctionName": "music-viz-stack-prod-checkerHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SCORES_BUCKET": "music-viz-scores-bucket",
            "DOMAIN_NAME": "musicviz.earbuddy.link",
            "BUCKET_NAME": "music-viz-scores-bucket",
            "WEBSOCKET_API": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".amazonaws.com/",
                  "prod"
                ]
              ]
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CheckerDownloaderExecutionRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CheckerHandlerLogGroup",
        "CheckerDownloaderExecutionRole"
      ]
    },
    "CheckerHandlerLambdaVersionCI7PEcRS8p5VULs8rCSisQs9vC2HTxUaHKkuULk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CheckerHandlerLambdaFunction"
        },
        "CodeSha256": "5f35a8446851b3f8015a926158f07c94fbe4eb68f8483de18d3b21a5ad281770"
      }
    },
    "UploadHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ImageUri": "110828812774.dkr.ecr.us-east-1.amazonaws.com/serverless-music-viz-stack-prod@sha256:d6cbcb385e55a3728513f42ecd6e054942e6a0ab98d708d333da0fb43ffadbd3"
        },
        "PackageType": "Image",
        "FunctionName": "UploadHandlertemp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SCORES_BUCKET": "music-viz-scores-bucket",
            "DOMAIN_NAME": "musicviz.earbuddy.link",
            "QUEUE_URL": {
              "Fn::GetAtt": [
                "WorkerBroker",
                "QueueUrl"
              ]
            },
            "BUCKET_NAME": "music-viz-scores-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "UploaderExecutionRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadHandlerLogGroup",
        "UploaderExecutionRole"
      ]
    },
    "UploadHandlerLambdaVersionsU3UgfsRxaDzP389tUW9QwO1w5tqsqA1wxDpIRR8Z4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadHandlerLambdaFunction"
        },
        "CodeSha256": "d6cbcb385e55a3728513f42ecd6e054942e6a0ab98d708d333da0fb43ffadbd3"
      }
    },
    "DownloadHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ImageUri": "110828812774.dkr.ecr.us-east-1.amazonaws.com/serverless-music-viz-stack-prod@sha256:6606d67384d1d041b767548ece67c36338657a68ce781c2ef8a25111b9594127"
        },
        "PackageType": "Image",
        "FunctionName": "music-viz-stack-prod-downloadHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SCORES_BUCKET": "music-viz-scores-bucket",
            "DOMAIN_NAME": "musicviz.earbuddy.link",
            "BUCKET_NAME": "music-viz-scores-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CheckerDownloaderExecutionRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DownloadHandlerLogGroup",
        "CheckerDownloaderExecutionRole"
      ]
    },
    "DownloadHandlerLambdaVersionDi0efvUFSXt4SJNvojXhmirMLVwlU4lZGiS1PlbUw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DownloadHandlerLambdaFunction"
        },
        "CodeSha256": "6606d67384d1d041b767548ece67c36338657a68ce781c2ef8a25111b9594127"
      }
    },
    "WorkerHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ImageUri": "110828812774.dkr.ecr.us-east-1.amazonaws.com/serverless-music-viz-stack-prod@sha256:23608a30417b8e45d347647c5de04ecdd18db2b064534173001e1acd18b60676"
        },
        "PackageType": "Image",
        "FunctionName": "music-viz-stack-prod-workerHandler",
        "MemorySize": 1024,
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "SCORES_BUCKET": "music-viz-scores-bucket",
            "DOMAIN_NAME": "musicviz.earbuddy.link",
            "BUCKET_NAME": "music-viz-scores-bucket",
            "QUEUE_URL": {
              "Fn::GetAtt": [
                "WorkerBroker",
                "QueueUrl"
              ]
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "WorkerExecutionRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WorkerHandlerLogGroup",
        "WorkerExecutionRole"
      ]
    },
    "WorkerHandlerLambdaVersionosfUVp5vaW9DpoBK0bUlJvTmrurVzysmWb2cf78": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WorkerHandlerLambdaFunction"
        },
        "CodeSha256": "23608a30417b8e45d347647c5de04ecdd18db2b064534173001e1acd18b60676"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "prod-music-viz-stack",
        "BinaryMediaTypes": [
          "*/*"
        ],
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceApi": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "api",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiUpload": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "upload",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiScore": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "score",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiUploadOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiScoreOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiScore"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiUploadPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiUpload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadHandlerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiScoreGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiScore"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DownloadHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DownloadHandlerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1699475489921": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "ApiGatewayMethodApiUploadOptions",
        "ApiGatewayMethodApiScoreOptions",
        "ApiGatewayMethodApiUploadPut",
        "ApiGatewayMethodApiScoreGet"
      ]
    },
    "UploadHandlerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DownloadHandlerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DownloadHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WebsocketsApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "prod-music-viz-stack-websockets",
        "RouteSelectionExpression": "$request.body.action",
        "Description": "Serverless Websockets",
        "ProtocolType": "WEBSOCKET"
      }
    },
    "CheckerHandlerWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "CheckerHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "CheckerHandlerLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "CheckerHandlerLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CheckerHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "SconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "CheckerHandlerWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdisconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "CheckerHandlerWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "onCheckWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "onCheck",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "CheckerHandlerWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "WebsocketsDeploymentStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "StageName": "prod",
        "Description": "Serverless Websockets",
        "DeploymentId": {
          "Ref": "WebsocketsDeploymentVNcxCDiant9TnntSY2iQV8m0clFxUGmuY1WD0xpFU"
        }
      }
    },
    "WebsocketsDeploymentVNcxCDiant9TnntSY2iQV8m0clFxUGmuY1WD0xpFU": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": [
        "SconnectWebsocketsRoute",
        "SdisconnectWebsocketsRoute",
        "onCheckWebsocketsRoute"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "Description": "Serverless Websockets"
      }
    },
    "WorkerHandlerEventSourceMappingSQSWorkerBroker": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "WorkerExecutionRole"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "WorkerBroker",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "WorkerHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "ScoresBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "music-viz-scores-bucket"
      }
    },
    "MusicVizFrontend": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "${AWS::StackName}"
              },
              "frontend-app"
            ]
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "FrontendBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "MusicVizFrontend"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "MusicVizClientAccessPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudfront.amazonaws.com"
              },
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Sub": "arn:aws:s3:::${MusicVizFrontend}/*"
              },
              "Condition": {
                "StringEquals": {
                  "AWS:SourceArn": {
                    "Fn::Sub": "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "SocketRewriteFunction": {
      "Type": "AWS::CloudFront::Function",
      "Properties": {
        "AutoPublish": true,
        "Name": "SocketRewriteFunction",
        "FunctionConfig": {
          "Comment": "Rewrite path for websocket",
          "Runtime": "cloudfront-js-1.0"
        },
        "FunctionCode": "function handler(event) {\n  var request = event.request;\n  \n  if (request.uri.includes('/socket')) {\n    request.uri = '/prod';\n  }\n  \n  return request;\n}\n"
      }
    },
    "CloudFrontDistribution": {
      "Type": "AWS::CloudFront::Distribution",
      "DependsOn": [
        "SocketRewriteFunction"
      ],
      "Properties": {
        "DistributionConfig": {
          "Origins": [
            {
              "Id": "MusicVizFrontend",
              "DomainName": {
                "Fn::Sub": "${MusicVizFrontend}.s3.${AWS::Region}.amazonaws.com"
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": ""
              },
              "OriginAccessControlId": {
                "Fn::GetAtt": [
                  "CloudFrontOACMusicViz",
                  "Id"
                ]
              }
            },
            {
              "Id": "RestApi",
              "DomainName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.us-east-1.amazonaws.com"
                  ]
                ]
              },
              "OriginPath": "/prod",
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only"
              }
            },
            {
              "Id": "WebSocket",
              "DomainName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "WebsocketsApi"
                    },
                    ".execute-api.us-east-1.amazonaws.com"
                  ]
                ]
              },
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only"
              }
            }
          ],
          "DefaultCacheBehavior": {
            "TargetOriginId": "MusicVizFrontend",
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "CacheBehaviors": [
            {
              "TargetOriginId": "RestApi",
              "PathPattern": "api/*",
              "ViewerProtocolPolicy": "redirect-to-https",
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE"
              ],
              "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac"
            },
            {
              "TargetOriginId": "WebSocket",
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE"
              ],
              "PathPattern": "socket",
              "FunctionAssociations": [
                {
                  "EventType": "viewer-request",
                  "FunctionARN": {
                    "Fn::GetAtt": [
                      "SocketRewriteFunction",
                      "FunctionMetadata.FunctionARN"
                    ]
                  }
                }
              ],
              "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "ViewerProtocolPolicy": "https-only"
            }
          ],
          "Enabled": true,
          "Aliases": [
            "musicviz.earbuddy.link"
          ],
          "ViewerCertificate": {
            "SslSupportMethod": "sni-only",
            "MinimumProtocolVersion": "TLSv1.2_2021",
            "AcmCertificateArn": {
              "Ref": "MusicVizCertificate"
            }
          },
          "DefaultRootObject": "index.html"
        }
      }
    },
    "CloudFrontOACMusicViz": {
      "Type": "AWS::CloudFront::OriginAccessControl",
      "Properties": {
        "OriginAccessControlConfig": {
          "Name": "MusicVizAccessControl",
          "OriginAccessControlOriginType": "s3",
          "SigningBehavior": "no-override",
          "SigningProtocol": "sigv4"
        }
      }
    },
    "MusicVizDNSAliasRecord": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneId": "Z0928443148KWAYRV1TH7",
        "RecordSets": [
          {
            "Name": "musicviz.earbuddy.link",
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": "Z2FDTNDATAQYW2",
              "DNSName": {
                "Fn::GetAtt": [
                  "CloudFrontDistribution",
                  "DomainName"
                ]
              }
            }
          },
          {
            "Name": "musicviz.earbuddy.link",
            "Type": "AAAA",
            "AliasTarget": {
              "HostedZoneId": "Z2FDTNDATAQYW2",
              "DNSName": {
                "Fn::GetAtt": [
                  "CloudFrontDistribution",
                  "DomainName"
                ]
              }
            }
          }
        ]
      }
    },
    "MusicVizCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": "musicviz.earbuddy.link",
        "DomainValidationOptions": [
          {
            "DomainName": "musicviz.earbuddy.link",
            "HostedZoneId": "Z0928443148KWAYRV1TH7"
          }
        ],
        "ValidationMethod": "DNS"
      }
    },
    "WorkerBroker": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "music-vis-worker-broker",
        "RedrivePolicy": {
          "maxReceiveCount": 5,
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "BrokerDLQ",
              "Arn"
            ]
          }
        },
        "VisibilityTimeout": 300
      }
    },
    "BrokerDLQ": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "worker-dlq"
      }
    },
    "UploaderExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "UploaderExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "MusicVizUploaderPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:logs",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "log-group:/aws/lambda/*:*:*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "sqs:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "WorkerBroker",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "s3:PutObject",
                  "Resource": "arn:aws:s3:::music-viz-scores-bucket/*"
                }
              ]
            }
          }
        ]
      }
    },
    "CheckerDownloaderExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "music-viz-stack-prod-CheckerExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "music-viz-stack-prod-CheckerExecutionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:logs",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "log-group:/aws/lambda/*:*:*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "execute-api:ManageConnections",
                  "Resource": "arn:aws:execute-api:*:*:**/@connections/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": "arn:aws:s3:::music-viz-scores-bucket/*"
                }
              ]
            }
          }
        ]
      }
    },
    "WorkerExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "WorkerExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "WorkerExecutionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:logs",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "log-group:/aws/lambda/*:*:*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": "arn:aws:s3:::music-viz-scores-bucket/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:DeleteMessage",
                    "sqs:ReceiveMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "WorkerBroker",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "UploaderInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "lambda.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "WorkerBroker",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-music-viz-stack-prod-ServerlessDeploymentBucketName"
      }
    },
    "CheckerHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CheckerHandlerLambdaVersionCI7PEcRS8p5VULs8rCSisQs9vC2HTxUaHKkuULk"
      },
      "Export": {
        "Name": "sls-music-viz-stack-prod-CheckerHandlerLambdaFunctionQualifiedArn"
      }
    },
    "UploadHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadHandlerLambdaVersionsU3UgfsRxaDzP389tUW9QwO1w5tqsqA1wxDpIRR8Z4"
      },
      "Export": {
        "Name": "sls-music-viz-stack-prod-UploadHandlerLambdaFunctionQualifiedArn"
      }
    },
    "DownloadHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DownloadHandlerLambdaVersionDi0efvUFSXt4SJNvojXhmirMLVwlU4lZGiS1PlbUw"
      },
      "Export": {
        "Name": "sls-music-viz-stack-prod-DownloadHandlerLambdaFunctionQualifiedArn"
      }
    },
    "WorkerHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WorkerHandlerLambdaVersionosfUVp5vaW9DpoBK0bUlJvTmrurVzysmWb2cf78"
      },
      "Export": {
        "Name": "sls-music-viz-stack-prod-WorkerHandlerLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/prod"
          ]
        ]
      },
      "Export": {
        "Name": "sls-music-viz-stack-prod-ServiceEndpoint"
      }
    },
    "ServiceEndpointWebsocket": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "WebsocketsApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/prod"
          ]
        ]
      },
      "Export": {
        "Name": "sls-music-viz-stack-prod-ServiceEndpointWebsocket"
      }
    }
  }
}